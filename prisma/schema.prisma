generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]

}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  folders       Folder[]
  posts         Post[]
  tags          Tag[]
  memos         Memo[]
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  user_id   String
  user      User     @relation(fields: [user_id], references: [id])

}

model Memo {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String   @db.LongText
  user_id   String
  user      User     @relation(fields: [user_id], references: [id])

}

model Post {
  id        String   @id @default(cuid())
  name      String
  image_url String?
  url       String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tags      Tag[]    @relation("_PostsOnTags")
  folder_id String
  folder    Folder   @relation(fields: [folder_id], references: [id])
  user_id   String
  user      User     @relation(fields: [user_id], references: [id])

}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  posts     Post[]   @relation("_PostsOnTags")
  user_id   String
  user      User     @relation(fields: [user_id], references: [id])


}

// model PostsOnTags {
//   createdAt DateTime @default(now())
//   post      Post     @relation(fields: [post_id], references: [id])
//   post_id   Int
//   tag       Tag      @relation(fields: [tag_id], references: [id])
//   tag_id    Int

//   @@id([post_id, tag_id])
// }
